name: ci-cd

on:
  push:
    branches: [main] # change si ta branche par defaut n est pas main

# Permissions minimales pour OIDC vers AWS
permissions:
  contents: read
  id-token: write

jobs:
  build-and-push:
    name: Build and push image to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image tag
        id: meta
        run: echo "tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            jslhostdocker/data-pipeline-test:${{ steps.meta.outputs.tag }}
            jslhostdocker/data-pipeline-test:latest
          # optionnel: platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }} # ml-pipeline-prod
      K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE }} # ml-pipeline
      K8S_DEPLOYMENT: ${{ secrets.K8S_DEPLOYMENT }} # ml-api
      K8S_CONTAINER: ${{ secrets.K8S_CONTAINER }} # api
      IMAGE: jslhostdocker/data-pipeline-test:${{ needs.build-and-push.outputs.image_tag }}
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Configure kubeconfig for EKS
        run: aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"

      - name: Set image and rollout
        run: |
          kubectl -n "$K8S_NAMESPACE" set image deploy/$K8S_DEPLOYMENT \
            $K8S_CONTAINER="$IMAGE" --record
          kubectl -n "$K8S_NAMESPACE" rollout status deploy/$K8S_DEPLOYMENT --timeout=5m
